using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace UnityStableReference;

[SuppressMessage("MicrosoftCodeAnalysisReleaseTracking", "RS2008:Enable analyzer release tracking")]
[Generator]
public class StableWrapperSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Combine assembly attribute check with type provider
        var typeProvider = context.CompilationProvider.Select((compilation, _) =>
        {
            // Check if assembly has the required attribute
            var hasAssemblyAttribute = compilation.Assembly.GetAttributes()
                .Any(attr => attr.AttributeClass?.Name == "StableWrapperCodeGenAttribute");

            // If assembly doesn't have the attribute, return empty collection
            if (!hasAssemblyAttribute) return Enumerable.Empty<INamedTypeSymbol>();

            // Get types from current assembly and referenced assemblies
            var assemblies = compilation.References
                .Select(compilation.GetAssemblyOrModuleSymbol)
                .OfType<IAssemblySymbol>()
                .Where(assembly => !assembly.Name.StartsWith("System.") && 
                                  !assembly.Name.Equals("System") && 
                                  !assembly.Name.Equals("mscorlib") &&
                                  !assembly.Name.StartsWith("Microsoft.") &&
                                  !assembly.Name.StartsWith("Unity"))
                .Append(compilation.Assembly)
                .ToArray();

            return assemblies.SelectMany(assembly => assembly.GlobalNamespace.GetAllTypes())
                .Where(type => type.GetAttributes().Any(a => a.AttributeClass?.Name == "StableWrapperCodeGenAttribute"))
            ;
        });

        context.RegisterSourceOutput(typeProvider, GenerateStableWrapper);
    }

    private void GenerateStableWrapper(SourceProductionContext context, IEnumerable<INamedTypeSymbol> types)
    {
        var code = new StringBuilder("// <auto-generated/>");
        code.AppendLine();
        code.AppendLine("namespace __StableWrapper__");
        code.AppendLine("{");

        foreach (var type in types)
        {
             if (!type.GetAttributes().Any(attr => attr.AttributeClass?.Name == "GuidAttribute"))
             {
                 // Diagnostic reporting is now handled by the analyzer
                 continue;
             }

             var guidAttr = type.GetAttributes().First(attr => attr.AttributeClass?.Name == "GuidAttribute");
             var guid = guidAttr.ConstructorArguments[0].Value?.ToString()?.Replace("\"", "").Replace("-", "");
             code.AppendLine($$"""
                               [System.Serializable] public class StableWrapper_{{guid}} : UnityStableReference.StableWrapper<{{type.ToDisplayString()}}> { }
                               """);
        }

        code.AppendLine("}");

        // Add the source to the context
        context.AddSource("StableWrapper.g.cs", code.ToString());
    }
}